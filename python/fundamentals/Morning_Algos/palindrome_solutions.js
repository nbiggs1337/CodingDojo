function isPalindrome(input){
    for (var i = 0 ; i < input.length/2; i++){
        if (input[i] != input[input.length - (i + 1)]){
            return false
        }
    }
    return true
}


// Ryan's function
function longestPalindrome(input) {
  if (input.length == 0) {
    return "";
  }

  // if input length is 1
  if (input.length == 1) {
    return input;
  }

  var result = input[0]; //just in case we find nothing,like an input of "abc"

  for (var i = 0; i < input.length; i++) {
    var left = 0;
    var right = 0;
    //determine if we have a string of idential characters
    //i.e. a trivial palindrome
    while (input[i - 1 - left] == input[i]) {
      left++;
    }
    while (input[i + 1 + right] == input[i]) {
      right++;
    }
    // such as: "qwerttttttreqwerewy"

    //now check for non-trivial palindromes
    while (input[i - 1 - left] == input[i+ 1 + right]) {
      if (input[i - 1 - left] === undefined && input[i+ 1 + right] === undefined) {
        console.log("entire string is palindrome");
        //special case here - entire string is a palindrome
        //just return the input
        return input;
      }
      left++;
      right++;
    }
    //we have a potential longest palindrome -
    //check it against the current longest
    potential = input.slice(i - left, i + right + 1);
    if (potential.length > result.length) {
      result = potential;
    }
  }
  
  return result;
}

// inefficient example
function longestPalindrome2(string) {
    var longest = string[0]
    for(var i = 0; i <= string.length-1; i++){
        for(var j = 0; j<= string.length-1; j++){

            var check = string.slice(i,j+1)
            if(isPalindrome(check) && check.length > longest.length){
                longest = check;
            }
        }
    }
    return longest
}

// Lucky's example
function longestPalindrome3(input) {
    var sub_str = ""
    if (input.length == 0 || input.length == 1) { return input}

    for (let sub_len = input.length - 1; sub_len > 1; sub_len--) {
        for (let start = 0; start < input.length - sub_len; start++) {
            sub_str = input.substring(start,start + sub_len - 1)
            if (isPalindrome(sub_str)) {
                return sub_str;
            }
        }
    }
}

var test = "";

var start = new Date().getTime();
console.log(longestPalindrome(test)); // short one
var end = new Date().getTime();
console.log(end - start)
var start = new Date().getTime();
console.log(longestPalindrome2(test)); // short one
var end = new Date().getTime();
console.log(end - start)
var start = new Date().getTime();
console.log(longestPalindrome3(test)); // short one
var end = new Date().getTime();
console.log(end - start)